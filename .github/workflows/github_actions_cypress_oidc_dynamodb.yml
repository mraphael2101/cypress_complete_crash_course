# YAML script to interrogate AWS Dynamo DB via OIDC Provider

name: sequential_test_execution
on:
  # workflow_dispatch event creates a btn on dashboard & waits for user to manually trigger the workflow
  workflow_dispatch:
    inputs:
      Testcycle:
        description: 'Testcycle'
        required: true
        default: 'TEST_SUITE_1'

      environment:
        description: 'Target environment for execution'
        required: true
        type: choice
        default: 'TEST'
        options:
          - DEV
          - TEST

jobs:
  Test_Execution:
    name: run_automated_tests  # first job

    # This code block is mandatory and is needed to load action inputs into AWS
    # tbd

    # if: always() ensures that the job it's attached to always runs when the workflow is triggered, regardless
    # of any other conditions in the workflow or the success/failure of previous steps
    if: always()
    runs-on: ubuntu-latest  # Platform for execution
    environment: ${{ inputs.environment }}
    #    env:
    #      ACTIONS_RUNNER_DEBUG: true

    steps:
      # Action checks-out the repository under $GITHUB_WORKSPACE, so that the workflow can access it
      - name: Checkout -> Get Workspace Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: package-lock.json
          node-version: 20.x
      - name: Install dependencies
        run: npm ci --no-fund

      # library brings Fetch API functionality to Node.js (enabler to make network requests in your code)
      - run: npm install node-fetch@3.3.1

      # Necessary to grant permissions to AWS resources
      - name: Configure AWS Credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.AWS_GITHUB_OIDC_CREDENTIALS }}
          output-credentials: true

      - name: Print AWS Credentials
        run: aws sts get-caller-identity

      # Prints the param values that the end-user has inputted from the GitHub context object
      # e.g. test cycle, and environment
      - name: user inputs
        run:  echo "${{ toJSON(github.event.inputs) }}" >> $GITHUB_STEP_SUMMARY

      - name: Download feature files from zephyr
        run: node scripts/loadFeature.mjs
        env:
          TEST_CYCLE_KEY: ${{github.event.inputs.Testcycle}}
          ZEPHYR_TOKEN: ${{ secrets.ZEPHYR_TOKEN }}

      # Check authentication and authorisation is successful
      - name: List Dynamo DB Table Physical Structure
        run:
          aws dynamodb describe-table --table-name my_db_table_name

      # Standard approach does not work
      #      - name: Set and Print out Cypress credentials
      #        run:
      #          export CY_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      #          export CY_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      #          export CY_AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
      #          echo $CY_AWS_ACCESS_KEY_ID
      #          echo $CY_AWS_SECRET_ACCESS_KEY
      #          echo $CY_AWS_SESSION_TOKEN

      # Standard approach does not work
      #      - name: Set and Print out Cypress credentials
      #        run:
      #          export CY_AWS_ACCESS_KEY_ID=${{ steps.creds.outputs.AWS_ACCESS_KEY_ID }}
      #          export CY_AWS_SECRET_ACCESS_KEY=${{ steps.creds.outputs.AWS_SECRET_ACCESS_KEY }}
      #          export CY_AWS_SESSION_TOKEN=${{ steps.creds.outputs.AWS_SESSION_TOKEN }}

      - name: Print Variables to JSON
        run: |
          echo "{\"AWS_ACCESS_KEY_ID\": \"${{ env.AWS_ACCESS_KEY_ID }}\",\"AWS_SECRET_ACCESS_KEY\": \"${{ env.AWS_SECRET_ACCESS_KEY }}\",\"AWS_SESSION_TOKEN\": \"${{ env.AWS_SESSION_TOKEN }}\"}" > credentials.json

      - name: Cypress run with env
        uses: cypress-io/github-action@v5
        with:
          command: npm run cypress:execution
        env:
          CYPRESS_MODE: 'zephyr/gitform'
          CYPRESS_TEST_ENV: ${{ github.event.inputs.environment}}
          #          AWS_ACCESS_KEY_ID: $CY_AWS_ACCESS_KEY_ID
          #          AWS_SECRET_ACCESS_KEY: $CY_AWS_SECRET_ACCESS_KEY
          #          AWS_SESSION_TOKEN: $CY_AWS_SESSION_TOKEN
          #          AWS_ACCESS_KEY_ID: ${{ steps.creds.outputs.CY_AWS_ACCESS_KEY_ID }}
          #          AWS_SECRET_ACCESS_KEY: ${{ steps.creds.outputs.CY_AWS_SECRET_ACCESS_KEY }}
          #          AWS_SESSION_TOKEN: ${{ steps.creds.outputs.CY_AWS_SESSION_TOKEN }}
          CYPRESS_AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          CYPRESS_AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          CYPRESS_AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          CYPRESS_ZEPHYR_TOKEN: ${{ secrets.ZEPHYR_TOKEN }}
          CYPRESS_IS_ZEPHYR: true
          CYPRESS_DYNAMO_DB: true
          SAMPLE_TEST_SUITE: true

            # - name: Upload E2E test reports
            #   if: always()
            #   uses: actions/upload-artifact@master
            #   with:
            #     name: test-reports
            #     path: allure-results

            # - name: Upload userData folder
            #   if: always()
            #   uses: actions/upload-artifact@master
            #   with:
          #     name: test-data
          #     path: cypress/userData


          # Report_Generation:
          #   name: Generate test report
          #   needs: Test_Execution
          #   if: always()
          #   runs-on: ubuntu-latest
          #   # runs-on: ubuntu-latest
          #   steps:
          #     - name: Install dependencies
          #       run: npm install mochawesome-merge mochawesome-report-generator

          #     - name: Create reports directory
          #       run: mkdir allure-results


          #     - name: Download test-reports
          #       uses: actions/download-artifact@master
          #       with:
          #         name: test-reports
          #         path: allure-results/


          #     - name: Get Allure history
          #       uses: actions/checkout@v3
          #       if: always()
          #       continue-on-error: true
          #       with:
          #         ref: gh-pages
          #         path: gh-pages

          #     - name: Generate Allure Report
          #       uses: simple-elf/allure-report-action@master
          #       if: always()
          #       with:
          #         allure_results: allure-results
          #         gh_pages: gh-pages

          #     - name: Deploy report to Github Pages
          #       if: always()
          #       uses: peaceiris/actions-gh-pages@v3
          #       with:
          #         github_token: ${{ secrets.GITHUB_TOKEN }}
          #         publish_branch: gh-pages
          #         publish_dir: allure-history
